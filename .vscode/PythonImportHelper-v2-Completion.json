[
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "BooleanField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SubmitField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "Length",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "orm",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "orm",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.ext.declarative",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.orm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "SerializerMixin",
        "importPath": "sqlalchemy_serializer",
        "description": "sqlalchemy_serializer",
        "isExtraImport": true,
        "detail": "sqlalchemy_serializer",
        "documentation": {}
    },
    {
        "label": "SerializerMixin",
        "importPath": "sqlalchemy_serializer",
        "description": "sqlalchemy_serializer",
        "isExtraImport": true,
        "detail": "sqlalchemy_serializer",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "flask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "flask",
        "description": "flask",
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "db_session",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "users",
        "importPath": "helpers",
        "description": "helpers",
        "isExtraImport": true,
        "detail": "helpers",
        "documentation": {}
    },
    {
        "label": "Questions",
        "importPath": "helpers.question",
        "description": "helpers.question",
        "isExtraImport": true,
        "detail": "helpers.question",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "helpers.users",
        "description": "helpers.users",
        "isExtraImport": true,
        "detail": "helpers.users",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "importPath": "forms.LoginForm",
        "description": "forms.LoginForm",
        "isExtraImport": true,
        "detail": "forms.LoginForm",
        "documentation": {}
    },
    {
        "label": "InformaticsAnswerForm",
        "importPath": "forms.informatics_answers_form",
        "description": "forms.informatics_answers_form",
        "isExtraImport": true,
        "detail": "forms.informatics_answers_form",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "importPath": "forms.user",
        "description": "forms.user",
        "isExtraImport": true,
        "detail": "forms.user",
        "documentation": {}
    },
    {
        "label": "InformaticsAnswerForm",
        "kind": 6,
        "importPath": "forms.informatics_answers_form",
        "description": "forms.informatics_answers_form",
        "peekOfCode": "class InformaticsAnswerForm(FlaskForm):\n    answer1 = RadioField(choices=[], default=1, validators=[DataRequired('choose an answer')], validate_choice=False)\n    answer2 = RadioField(choices=[], default=1, validators=[DataRequired('choose an answer')], validate_choice=False)\n    answer3 = RadioField(choices=[], default=1, validators=[DataRequired('choose an answer')], validate_choice=False)\n    answer4 = RadioField(choices=[], default=1, validators=[DataRequired('choose an answer')], validate_choice=False)\n    answer5 = RadioField(choices=[], default=1, validators=[DataRequired('choose an answer')], validate_choice=False)\n    submit = SubmitField('Ответить')",
        "detail": "forms.informatics_answers_form",
        "documentation": {}
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "forms.LoginForm",
        "description": "forms.LoginForm",
        "peekOfCode": "class LoginForm(FlaskForm):\n    email = EmailField(validators=[DataRequired('incorrect email')])\n    password = PasswordField(validators=[DataRequired('incorrect password')])\n    remember_me = BooleanField('Запомнить меня')\n    submit = SubmitField('Войти')",
        "detail": "forms.LoginForm",
        "documentation": {}
    },
    {
        "label": "RegisterForm",
        "kind": 6,
        "importPath": "forms.user",
        "description": "forms.user",
        "peekOfCode": "class RegisterForm(FlaskForm):\n    email = EmailField(validators=[DataRequired('incorrect email'), ])\n    password = PasswordField(validators=[DataRequired()])\n    password_again = PasswordField( validators=[DataRequired('password mismatch')])\n    name = StringField(validators=[DataRequired()])\n    submit = SubmitField('Войти')",
        "detail": "forms.user",
        "documentation": {}
    },
    {
        "label": "global_init",
        "kind": 2,
        "importPath": "helpers.db_session",
        "description": "helpers.db_session",
        "peekOfCode": "def global_init(db_file):\n    global __factory\n    if __factory:\n        return\n    if not db_file or not db_file.strip():\n        raise Exception(\"Необходимо указать файл базы данных.\")\n    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'\n    print(f\"Подключение к базе данных по адресу {conn_str}\")\n    engine = sa.create_engine(conn_str, echo=False)\n    __factory = orm.sessionmaker(bind=engine)",
        "detail": "helpers.db_session",
        "documentation": {}
    },
    {
        "label": "create_session",
        "kind": 2,
        "importPath": "helpers.db_session",
        "description": "helpers.db_session",
        "peekOfCode": "def create_session() -> Session:\n    global __factory\n    return __factory()",
        "detail": "helpers.db_session",
        "documentation": {}
    },
    {
        "label": "SqlAlchemyBase",
        "kind": 5,
        "importPath": "helpers.db_session",
        "description": "helpers.db_session",
        "peekOfCode": "SqlAlchemyBase = dec.declarative_base()\n__factory = None\ndef global_init(db_file):\n    global __factory\n    if __factory:\n        return\n    if not db_file or not db_file.strip():\n        raise Exception(\"Необходимо указать файл базы данных.\")\n    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'\n    print(f\"Подключение к базе данных по адресу {conn_str}\")",
        "detail": "helpers.db_session",
        "documentation": {}
    },
    {
        "label": "__factory",
        "kind": 5,
        "importPath": "helpers.db_session",
        "description": "helpers.db_session",
        "peekOfCode": "__factory = None\ndef global_init(db_file):\n    global __factory\n    if __factory:\n        return\n    if not db_file or not db_file.strip():\n        raise Exception(\"Необходимо указать файл базы данных.\")\n    conn_str = f'sqlite:///{db_file.strip()}?check_same_thread=False'\n    print(f\"Подключение к базе данных по адресу {conn_str}\")\n    engine = sa.create_engine(conn_str, echo=False)",
        "detail": "helpers.db_session",
        "documentation": {}
    },
    {
        "label": "Questions",
        "kind": 6,
        "importPath": "helpers.question",
        "description": "helpers.question",
        "peekOfCode": "class Questions(SqlAlchemyBase, UserMixin, SerializerMixin):\n    __tablename__ = 'questions'\n    id = sqlalchemy.Column(sqlalchemy.Integer,\n                           primary_key=True, autoincrement=True, unique=True)\n    question = sqlalchemy.Column(sqlalchemy.String, unique=True)\n    correct_answer = sqlalchemy.Column(sqlalchemy.String, unique=True)\n    wrong_answer1 = sqlalchemy.Column(sqlalchemy.String, unique=True)\n    wrong_answer2 = sqlalchemy.Column(sqlalchemy.String, unique=True)\n    def __repr__(self):\n        return f\"{self.question}\"",
        "detail": "helpers.question",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "helpers.users",
        "description": "helpers.users",
        "peekOfCode": "class User(SqlAlchemyBase, UserMixin, SerializerMixin):\n    __tablename__ = 'users'\n    id = sqlalchemy.Column(sqlalchemy.Integer,\n                           primary_key=True, autoincrement=True)\n    surname = sqlalchemy.Column(sqlalchemy.String)\n    name = sqlalchemy.Column(sqlalchemy.String)\n    age = sqlalchemy.Column(sqlalchemy.Integer)\n    position = sqlalchemy.Column(sqlalchemy.String)\n    speciality = sqlalchemy.Column(sqlalchemy.String)\n    address = sqlalchemy.Column(sqlalchemy.String)",
        "detail": "helpers.users",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def index():\n    return render_template('index.html', title='Главная страница', bgc='#F2D9FD')\n@app.route(\"/informatics\", methods=['GET', 'POST'])\n@login_required\ndef informatics():\n    form = InformaticsAnswerForm()\n    db_sess = db_session.create_session()\n    if request.method == \"GET\":\n        necessary_questions = sample(db_sess.query(Questions).all(), k=5)\n        all_tests[current_user.id] = necessary_questions",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "informatics",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def informatics():\n    form = InformaticsAnswerForm()\n    db_sess = db_session.create_session()\n    if request.method == \"GET\":\n        necessary_questions = sample(db_sess.query(Questions).all(), k=5)\n        all_tests[current_user.id] = necessary_questions\n        questions = []\n        print(all_tests[current_user.id], '------------2--------')\n        correct_answers = []\n        form_answers = [form.answer1, form.answer2, form.answer3, form.answer4, form.answer5]",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def load_user(user_id):\n    db_sess = db_session.create_session()\n    return db_sess.get(User, int(user_id))\n@app.route('/login', methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect('/')\n    form = LoginForm()\n    if form.validate_on_submit():\n        db_sess = db_session.create_session()",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def login():\n    if current_user.is_authenticated:\n        return redirect('/')\n    form = LoginForm()\n    if form.validate_on_submit():\n        db_sess = db_session.create_session()\n        user = db_sess.query(User).filter(User.email == form.email.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user, remember=form.remember_me.data)\n            return redirect(\"/\")",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def logout():\n    logout_user()\n    return redirect(\"/\")\n@app.route('/play')\ndef play():\n    return render_template('play.html')\n@app.route('/location')\ndef location():\n    return 'локация'\n@app.route('/rules')",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "play",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def play():\n    return render_template('play.html')\n@app.route('/location')\ndef location():\n    return 'локация'\n@app.route('/rules')\ndef rules():\n    return render_template('rules.html')\n@app.route('/register', methods=['GET', 'POST'])\ndef register():",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "location",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def location():\n    return 'локация'\n@app.route('/rules')\ndef rules():\n    return render_template('rules.html')\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect('/')\n    form = RegisterForm()",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "rules",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def rules():\n    return render_template('rules.html')\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect('/')\n    form = RegisterForm()\n    if form.validate_on_submit():\n        if form.password.data != form.password_again.data:\n            return render_template('register.html',",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def register():\n    if current_user.is_authenticated:\n        return redirect('/')\n    form = RegisterForm()\n    if form.validate_on_submit():\n        if form.password.data != form.password_again.data:\n            return render_template('register.html',\n                                   title='Регистрация',\n                                   form=form,\n                                   message=\"Пароли не совпадают\")",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "unauthorized",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def unauthorized(error):\n    return render_template('401.html'), 401\n@app.errorhandler(404)\ndef not_found(error):\n    return render_template('404.html'), 404\n@app.errorhandler(405)\ndef not_allowed(error):\n    return render_template('405.html'), 405\ndef main():\n    db_session.global_init(\"db/base.sqlite\")",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "not_found",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def not_found(error):\n    return render_template('404.html'), 404\n@app.errorhandler(405)\ndef not_allowed(error):\n    return render_template('405.html'), 405\ndef main():\n    db_session.global_init(\"db/base.sqlite\")\n    db_sess = db_session.create_session()\n    user = db_sess.query(User).first()\n    app.run(debug=True, port=\"8000\")",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "not_allowed",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def not_allowed(error):\n    return render_template('405.html'), 405\ndef main():\n    db_session.global_init(\"db/base.sqlite\")\n    db_sess = db_session.create_session()\n    user = db_sess.query(User).first()\n    app.run(debug=True, port=\"8000\")\nif __name__ == '__main__':\n    main()\n#     user = db_sess.query(User).first()",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "def main():\n    db_session.global_init(\"db/base.sqlite\")\n    db_sess = db_session.create_session()\n    user = db_sess.query(User).first()\n    app.run(debug=True, port=\"8000\")\nif __name__ == '__main__':\n    main()\n#     user = db_sess.query(User).first()\n#     app.run(debug=True, port=\"8000\")\n# if __name__ == '__main__':",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app = Flask(__name__)\napp.config['SECRET_KEY'] = 'yandexlyceum_secret_key'\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nall_tests = {}\n@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html', title='Главная страница', bgc='#F2D9FD')\n@app.route(\"/informatics\", methods=['GET', 'POST'])",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "app.config['SECRET_KEY']",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "app.config['SECRET_KEY'] = 'yandexlyceum_secret_key'\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\nall_tests = {}\n@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html', title='Главная страница', bgc='#F2D9FD')\n@app.route(\"/informatics\", methods=['GET', 'POST'])\n@login_required",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "login_manager = LoginManager()\nlogin_manager.init_app(app)\nall_tests = {}\n@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html', title='Главная страница', bgc='#F2D9FD')\n@app.route(\"/informatics\", methods=['GET', 'POST'])\n@login_required\ndef informatics():",
        "detail": "server",
        "documentation": {}
    },
    {
        "label": "all_tests",
        "kind": 5,
        "importPath": "server",
        "description": "server",
        "peekOfCode": "all_tests = {}\n@app.route('/')\n@app.route('/index')\ndef index():\n    return render_template('index.html', title='Главная страница', bgc='#F2D9FD')\n@app.route(\"/informatics\", methods=['GET', 'POST'])\n@login_required\ndef informatics():\n    form = InformaticsAnswerForm()\n    db_sess = db_session.create_session()",
        "detail": "server",
        "documentation": {}
    }
]